name: Deploy WhatsApp-AutoCoder to Google Cloud Run

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - development
          - staging
          - production

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: us-central1
  GCP_ARTIFACT_REGISTRY: autocoder
  GCP_SERVICE_NAME: whatsapp-coder

jobs:
  test:
    name: Run Unit & Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov
      
      - name: Run tests with coverage
        run: pytest --cov=app --cov-report=xml
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        continue-on-error: true
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  build-and-deploy:
    name: Build and Deploy to Cloud Run
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}
      
      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev --quiet
      
      - name: Build and Push Docker Image
        id: docker
        run: |
          IMAGE_TAG="${{ github.sha }}"
          IMAGE_URL="${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_ARTIFACT_REGISTRY }}/${{ env.GCP_SERVICE_NAME }}:${IMAGE_TAG}"
          
          echo "Building image: ${IMAGE_URL}"
          
          docker build --no-cache -t ${IMAGE_URL} .
          docker push ${IMAGE_URL}
          
          echo "image_url=${IMAGE_URL}" >> $GITHUB_OUTPUT
      
      - name: Deploy to Cloud Run
        id: deploy
        run: |
          # First, clear any existing env vars and secrets
          gcloud run services update ${{ env.GCP_SERVICE_NAME }} \
            --region=${{ env.GCP_REGION }} \
            --clear-env-vars \
            --clear-secrets \
            --quiet || true
          
          # Now deploy with new configuration
          gcloud run deploy ${{ env.GCP_SERVICE_NAME }} \
            --image="${{ steps.docker.outputs.image_url }}" \
            --region=${{ env.GCP_REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --memory=1Gi \
            --cpu=1 \
            --timeout=300 \
            --max-instances=10 \
            --min-instances=0 \
            --set-env-vars="ENVIRONMENT=${{ github.event.inputs.environment || 'production' }},TWILIO_ACCOUNT_SID=test_sid,TWILIO_AUTH_TOKEN=test_token,TWILIO_PHONE_NUMBER=whatsapp:+14155238886,ALLOWED_PHONE_NUMBERS=" \
            --quiet
          
          SERVICE_URL=$(gcloud run services describe ${{ env.GCP_SERVICE_NAME }} \
            --region=${{ env.GCP_REGION }} \
            --format='value(status.url)')
          
          echo "service_url=${SERVICE_URL}" >> $GITHUB_OUTPUT
      
      - name: Verify Deployment
        run: |
          echo "Waiting for service to become available..."
          sleep 30
          
          for i in {1..30}; do
            STATUS_CODE=$(curl -o /dev/null -s -w "%{http_code}" "${{ steps.deploy.outputs.service_url }}/health")
            if [ "$STATUS_CODE" -eq 200 ]; then
              echo "‚úÖ Service is healthy!"
              exit 0
            fi
            echo "Waiting for health check... (attempt $i/30, status: $STATUS_CODE)"
            sleep 10
          done
          
          echo "‚ùå Service health check failed after multiple attempts."
          exit 1
      
      - name: Deployment Summary
        if: always()
        run: |
          echo "## üöÄ Deployment Summary"
          echo ""
          echo "* Environment: ${{ github.event.inputs.environment || 'production' }}"
          echo "* Service URL: ${{ steps.deploy.outputs.service_url }}"
          echo "* Image URL: ${{ steps.docker.outputs.image_url }}"
          echo ""
          echo "### Next Steps:"
          echo "1. Verify functionality by sending a WhatsApp message."
          echo "2. Monitor logs in Google Cloud Run."
          echo "3. Update Twilio webhook URL to: ${{ steps.deploy.outputs.service_url }}/webhook/whatsapp"

